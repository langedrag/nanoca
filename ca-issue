#!/bin/sh

# Config
crl_dist="URI:http://acme.example.com/crl.pem"
key_size=2048
crt_days=3650
crl_days=30

dir=~/.nanoca

# Prereq validation 
if [ ! -f "$dir/cakey.pem" ]; then { echo "ERROR: CA not initialized. No CA key found." >&2; exit 1;} fi

# Input validation
echo $1 | grep -E -q '^(([a-zA-Z0-9])+\.)+[a-zA-Z]{2,}$' \
	|| { echo "ERROR: The FQDN for the host for which to create a certificate must be provided as an argument." >&2; exit 1; };
hostdn=$1;

# Generate RSA private and public key pair on behalf of the subject
dd if=/dev/urandom of=$dir/.rnd bs=1024 count=1 status=none
openssl genrsa \
        > /dev/null 2>& 1 \
	-out $hostdn.key \
	-rand $dir/.rnd \
	$key_size 
if [ $? -ne 0 ]; then echo "ERROR: Failed to generate RSA key pair"; exit 1; fi;

# Use the subjects private key to create a signed request to issue a certificte 
dd if=/dev/urandom of=$dir/.rnd bs=1024 count=1 status=none
openssl req \
        > /dev/null 2>& 1 \
	-new \
	-sha256 \
	-rand $dir/.rnd \
	-key $hostdn.key \
	-out $hostdn.csr \
	-keyout $hostdn.key \
	-config /dev/fd/3 3<<EOF
[req]
distinguished_name=dn
req_extensions=v3_req
prompt=no
[dn]
CN=$hostdn
[v3_req]
subjectAltName=@alt_names
[alt_names]
DNS.1=$hostdn
EOF
if [ $? -ne 0 ]; then echo "ERROR: Failed to sign certificate request"; exit 2; fi;

# Use the CA's private key to sign the certificate request file
# i.e. issue certificate to the subject 
dd if=/dev/urandom of=$dir/.rnd bs=1024 count=1 status=none
openssl ca \
        > $dir/lasterror 2>& 1\
	-notext \
	-in $hostdn.csr \
	-out $hostdn.crt \
	-rand $dir/.rnd \
	-batch \
	-outdir $dir/certs \
	-cert $dir/cacert.pem \
	-keyfile $dir/cakey.pem \
	-days $crt_days \
	-md sha256 \
	-crldays $crl_days \
	-noemailDN \
	-config /dev/fd/3 3<<EOF
[ ca ]
default_ca=nano_ca 	    # The default ca section
[ nano_ca ]
database=$dir/.certdb       # certificate database
#rand_serial=yes
serial=$dir/.serial         # serial number file
distinguished_name=dn       # dn policy reference, see below
x509_extensions=v3_req      # v3 policy reference, see below
policy=nano_policy          # general policy reference, see below
copy_extensions=copy        # Don't copy extensions from request
name_opt=ca_default
cert_opt=ca_default
prompt=no
[ dn ]
CN=$hostdn
[ v3_req ]
subjectAltName=@alt_names
extendedKeyUsage=serverAuth,clientAuth
basicConstraints=critical,CA:FALSE
keyUsage=critical,digitalSignature,keyEncipherment
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer
crlDistributionPoints=$crl_dist
[ alt_names ]
DNS.1=$hostdn
[ nano_policy ]
commonName=supplied
EOF
if [ $? -ne 0 ]
then 
   echo "ERROR: Failed to issue certificate request ($dir/lasterror)"; exit 1; 
fi

secret=`tr -dc A-Za-z0-9 < /dev/urandom | head -c16`
echo $secret > $hostdn.pfx.secret
openssl pkcs12 \
	-export \
	-out $hostdn.pfx \
	-in $hostdn.crt \
	-inkey $hostdn.key \
	-passout pass:$secret
if [ $? -ne 0 ]
then
   echo "ERROR: Failed to create PKCS 12 file $hostdn.pfx" exit 1;
fi
shred -uz $hostdn.key
rm $hostdn.csr
